#version 450

layout(local_size_x = 8, local_size_y = 8) in;


//warp_color_tex,warp_background_buffer_color_tex0,warp_background_buffer_color_tex1,warp_background_buffer_depth_tex0,warp_background_buffer_depth_tex1,warp_background_buffer_worldposition_tex0,warp_background_buffer_worldposition_tex1
layout(binding = 0) uniform sampler2D warp_color;
layout(binding = 1) uniform sampler2D warp_background_buffer_color0;
layout(binding = 2) uniform sampler2D warp_background_buffer_color1;
layout(binding = 3) uniform sampler2D warp_background_buffer_depth0;
layout(binding = 4) uniform sampler2D warp_background_buffer_depth1;
layout(binding = 5) uniform sampler2D warp_background_buffer_worldposition0;
layout(binding = 6) uniform sampler2D warp_background_buffer_worldposition1;

uniform mat4 vp_matrix;
uniform mat4 vp_matrix_next;

layout(rgba32f, binding = 0) writeonly uniform image2D inpaint_color;
layout(r32ui, binding = 1) uniform uimage2D warp_depth;
layout(rgba32f, binding = 2) writeonly uniform image2D b0_warp;
layout(rgba32f, binding = 3) writeonly uniform image2D b1_warp;

void main(){
    ivec2 pixCoord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 frameSize = textureSize(warp_color, 0);
	if (pixCoord.x >= frameSize.x || pixCoord.y >= frameSize.y) {
		return;
	}
	vec2 size = vec2(frameSize);

    vec4 color_curr = texelFetch(warp_color, pixCoord, 0);
    if(color_curr.w > 0){
        imageStore(inpaint_color,pixCoord , color_curr);
    }

    //projection B0
    vec4 buffer_color0 = texelFetch(warp_background_buffer_color0,pixCoord,0);

    vec3 world_pos_cur0 = texelFetch(warp_background_buffer_worldposition0, pixCoord, 0).xyz;
    vec4 ndc_next0 = transpose(vp_matrix_next) * vec4(world_pos_cur0, 1.0);
	ndc_next0.xyz = ndc_next0.xyz / ndc_next0.w;
	vec4 ndc_cur0 = transpose(vp_matrix) * vec4(world_pos_cur0, 1.0);
	ndc_cur0.xyz = ndc_cur0.xyz / ndc_cur0.w;
	vec2 flow_save0 = (ndc_next0.xy - ndc_cur0.xy) * vec2(frameSize) / 2;
    ivec2 forw_0 = ivec2(round(flow_save0.x),round(flow_save0.y));
    ivec2 forw_pos0 = ivec2(pixCoord.x + forw_0.x, pixCoord.y - forw_0.y);
    vec4 inpaint_target_color0 = texelFetch(warp_color,forw_pos0,0);
    float pix_depth0 = ndc_cur0.z + 1;
	uint pix_depth_int0 = int(pix_depth0 * 65535);
    if(inpaint_target_color0.w == 0){
	    imageAtomicMax(warp_depth, forw_pos0, pix_depth_int0);
    }
    //imageAtomicMax(warp_depth, forw_pos0, pix_depth_int0);

    //projection B1
    vec4 buffer_color1 = texelFetch(warp_background_buffer_color1,pixCoord/2,0);

    vec3 world_pos_cur1 = texelFetch(warp_background_buffer_worldposition1, pixCoord/2, 0).xyz;
    vec4 ndc_next1 = transpose(vp_matrix_next) * vec4(world_pos_cur1, 1.0);
	ndc_next1.xyz = ndc_next1.xyz / ndc_next1.w;
	vec4 ndc_cur1 = transpose(vp_matrix) * vec4(world_pos_cur1, 1.0);
	ndc_cur1.xyz = ndc_cur1.xyz / ndc_cur1.w;
	vec2 flow_save1 = (ndc_next1.xy - ndc_cur1.xy) * vec2(frameSize) / 2;
    ivec2 forw_1 = ivec2(round(flow_save1.x),round(flow_save1.y));
    ivec2 forw_pos1 = ivec2(pixCoord.x + forw_1.x, pixCoord.y - forw_1.y);
    vec4 inpaint_target_color1 = texelFetch(warp_color,forw_pos1,0);
    float pix_depth1 = ndc_cur1.z + 1;
	uint pix_depth_int1 = int(pix_depth1 * 65535);
    if(inpaint_target_color1.w == 0){
        
	    imageAtomicMax(warp_depth, forw_pos1, pix_depth_int1);
    }
    //imageAtomicMax(warp_depth, forw_pos1, pix_depth_int1);
    memoryBarrier();
    
    uint pix_depth_int_cur0 = imageLoad(warp_depth, forw_pos0).x;
	if(pix_depth_int0 == pix_depth_int_cur0) {
		// forward warp
		imageStore(inpaint_color, forw_pos0, buffer_color0);
        imageStore(b0_warp,forw_pos0,buffer_color0);
	}
    uint pix_depth_int_cur1 = imageLoad(warp_depth, forw_pos1).x;
    if(pix_depth_int1 == pix_depth_int_cur1){
        imageStore(inpaint_color, forw_pos1, buffer_color1);
        imageStore(b1_warp, forw_pos1, buffer_color1);
    }

}