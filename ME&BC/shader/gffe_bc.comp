#version 450

layout(local_size_x = 8, local_size_y = 8) in;

layout(binding = 0) uniform sampler2D world_pos;
layout(binding = 1) uniform sampler2D world_pos_1;
layout(binding = 2) uniform sampler2D mv;
layout(binding = 3) uniform sampler2D color;
layout(binding = 4) uniform sampler2D depth;
layout(binding = 5) uniform sampler2D stencil;
layout(binding = 6) uniform sampler2D background_buffer_color0;
layout(binding = 7) uniform sampler2D background_buffer_color1;
layout(binding = 8) uniform sampler2D background_buffer_depth0;
layout(binding = 9) uniform sampler2D background_buffer_depth1;

uniform mat4 vp_matrix;
uniform mat4 vp_matrix_next;

layout(rgba32f, binding = 0) writeonly uniform image2D warp_background_buffer_color0;
layout(rgba32f, binding = 1) writeonly uniform image2D warp_background_buffer_color1;
layout(r32ui, binding = 2) uniform uimage2D warp_background_buffer_depth0;
layout(r32ui, binding = 3) uniform uimage2D warp_background_buffer_depth1;
void main(){
    ivec2 pixCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 pixCoord1 = pixCoord/2;
    ivec2 frameSize = textureSize(color, 0);
    if (pixCoord.x >= frameSize.x || pixCoord.y >= frameSize.y) {
		return;
	}
	vec2 size = vec2(frameSize);

    vec3 world_pos_cur = texelFetch(world_pos, pixCoord, 0).xyz;
    float dynamic = texelFetch(stencil, pixCoord, 0).x;
    vec4 buffer_color0 = vec4(0,0,0,0);
    vec4 buffer_color1 = vec4(0,0,0,0);
    float buffer_depth0 = 0;
    float buffer_depth1 = 0;
    uint buffer_depth_int0 = 2147483647;
    uint buffer_depth_int1 = 2147483647;
    uint layer1_flag = 0;
    //static fragments process
    if (dynamic < 0.5) {
        //valid B0
        buffer_color0 = texelFetch(color, pixCoord, 0);
        buffer_depth0 = texelFetch(depth, pixCoord, 0).x;
        buffer_depth_int0 = uint(2147483647 - buffer_depth0 * 65535);

        //compare depth and update second layer
        vec2 pix_mv = texelFetch(mv, pixCoord, 0).xy;
        pix_mv.y = -pix_mv.y;
        vec2 pre_p = vec2(pixCoord) - pix_mv;
        ivec2 pre_pixCoord = ivec2(round(pre_p));
        float pre_pix_depth = texelFetch(background_buffer_depth0, pre_pixCoord, 0).x;
        uint pre_pix_depth_int = int(2147483647 - pre_pix_depth * 65535);

        if(pre_pix_depth>buffer_depth0){

            // buffer_depth1 = pre_pix_depth;
            // buffer_color1 = texelFetch(background_buffer_color1, pre_pixCoord, 0);
            imageAtomicMax(warp_background_buffer_depth1, pixCoord1, pre_pix_depth_int);
            layer1_flag = 1;
            
        }
        memoryBarrier();
        uint pix_depth_int = imageLoad(warp_background_buffer_depth1, pixCoord1).x;
        if (pix_depth_int == pre_pix_depth_int&&pre_pix_depth>buffer_depth0) {            
            buffer_color1 = texelFetch(background_buffer_color0, pre_pixCoord, 0);
            imageStore(warp_background_buffer_color1, pixCoord1, buffer_color1);
        }

	}else{
        vec2 pix_mv = texelFetch(mv, pixCoord, 0).xy;
        pix_mv.y = -pix_mv.y;
        vec2 pre_p = vec2(pixCoord) - pix_mv;
        ivec2 pre_pixCoord = ivec2(round(pre_p));
        buffer_depth0 = texelFetch(background_buffer_depth0, pre_pixCoord, 0).x;
        buffer_color0 = texelFetch(background_buffer_color0, pre_pixCoord, 0);
    }


    imageStore(warp_background_buffer_color0, pixCoord, buffer_color0);
    //imageStore(warp_background_buffer_depth0, pixCoord, buffer_depth_int0);
    imageAtomicMax(warp_background_buffer_depth0, pixCoord,  buffer_depth_int0);
    if(layer1_flag==0){
        imageStore(warp_background_buffer_color1, pixCoord1, buffer_color1);
        imageAtomicMax(warp_background_buffer_depth1, pixCoord1,  buffer_depth_int1);
    }


}
