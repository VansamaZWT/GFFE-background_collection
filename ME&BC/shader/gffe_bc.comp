#version 450

layout(local_size_x = 8, local_size_y = 8) in;

layout(binding = 0) uniform sampler2D world_pos;
layout(binding = 1) uniform sampler2D world_pos_1;
layout(binding = 2) uniform sampler2D mv;
layout(binding = 3) uniform sampler2D color;
layout(binding = 4) uniform sampler2D depth;
layout(binding = 5) uniform sampler2D stencil;
layout(binding = 6) uniform sampler2D background_buffer_color0;
layout(binding = 7) uniform sampler2D background_buffer_color1;
layout(binding = 8) uniform sampler2D background_buffer_depth0;
layout(binding = 9) uniform sampler2D background_buffer_depth1;

uniform mat4 vp_matrix;
uniform mat4 vp_matrix_next;

layout(rgba32f, binding = 0) writeonly uniform image2D warp_background_buffer_color0;
layout(rgba32f, binding = 1) writeonly uniform image2D warp_background_buffer_color1;
layout(r32ui, binding = 2) uniform uimage2D warp_background_buffer_depth0;
layout(r32ui, binding = 3) uniform uimage2D warp_background_buffer_depth1;
void main(){
    ivec2 pixCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 frameSize = textureSize(color, 0);
    if (pixCoord.x >= frameSize.x || pixCoord.y >= frameSize.y) {
		return;
	}
	vec2 size = vec2(frameSize);

    vec3 world_pos_cur = texelFetch(world_pos, pixCoord, 0).xyz;
    float dynamic = texelFetch(stencil, pixCoord, 0).x;
    vec4 buffer_color0;
    vec4 buffer_color1;
    float buffer_depth0;
    float buffer_depth1;
    uint buffer_depth_int0;
    //static fragments process
    if (dynamic < 0.5) {
		// vec2 pix_mv = texelFetch(mv, pixCoord, 0).xy;
		// pix_mv.y = -pix_mv.y;
		// vec2 back_proj = vec2(pixCoord) - pix_mv;
		// vec3 world_pos_prev = texelFetch(world_pos_1, ivec2(round(back_proj)), 0).xyz;
		// world_pos_next = world_pos_cur + 0.5 * (world_pos_cur - world_pos_prev);
        buffer_color0 = texelFetch(color, pixCoord, 0);
        buffer_depth0 = texelFetch(depth, pixCoord, 0).x;
        buffer_depth_int0 = uint(2147483647 - buffer_depth0 * 65535);
	}else{
        buffer_color0 = texelFetch(background_buffer_color0, pixCoord, 0);
        buffer_depth0 = texelFetch(background_buffer_depth0, pixCoord, 0).x;
        buffer_depth_int0 = uint(2147483647 - buffer_depth0 * 65535);
    }


    imageStore(warp_background_buffer_color0, pixCoord, buffer_color0);
    //imageStore(warp_background_buffer_depth0, pixCoord, buffer_depth_int0);
    imageAtomicMax(warp_background_buffer_depth0, pixCoord,  buffer_depth_int0);

}
// void main() {
 
//     ivec2 pixCoord = ivec2(gl_GlobalInvocationID.xy);


//     ivec2 texSize0 = textureSize(background_buffer_tex0, 0);
//     ivec2 texSize1 = textureSize(background_buffer_tex1, 0);
//     ivec2 texSize2 = textureSize(background_buffer_tex2, 0);
//     ivec2 texSize3 = textureSize(background_buffer_tex3, 0);

//     vec2 uv = vec2(pixCoord) / vec2(textureSize(background_buffer_tex0,0));


//     ivec2 inputCoord = ivec2(uv * vec2(texSize0));


//     // if (inputCoord.x < 0 || inputCoord.x >= texSize0.x || inputCoord.y < 0 || inputCoord.y >= texSize0.y) {
//     //     return;
//     // }


//     vec4 texValue = texelFetch(background_buffer_tex0, pixCoord, 0);

 
//     uint value = uint(texValue.x ); 
//     imageStore(warp_background_buffer_tex0, pixCoord, texValue);

//     // processBackgroundBuffer(background_buffer_tex0, warp_background_buffer_tex0, pixCoord, texSize0);
//     // processBackgroundBuffer(background_buffer_tex1, warp_background_buffer_tex1, pixCoord, texSize1);
//     // processBackgroundBuffer(background_buffer_tex2, warp_background_buffer_tex2, pixCoord, texSize2);
//     // processBackgroundBuffer(background_buffer_tex3, warp_background_buffer_tex3, pixCoord, texSize3);
// }